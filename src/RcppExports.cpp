// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "seqtrie_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CharCounter_create
CharCounterXPtr CharCounter_create();
RcppExport SEXP _seqtrie_CharCounter_create() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(CharCounter_create());
    return rcpp_result_gen;
END_RCPP
}
// CharCounter_add
void CharCounter_add(CharCounterXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_CharCounter_add(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< CharCounterXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    CharCounter_add(xp, sequences);
    return R_NilValue;
END_RCPP
}
// CharCounter_subtract
void CharCounter_subtract(CharCounterXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_CharCounter_subtract(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< CharCounterXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    CharCounter_subtract(xp, sequences);
    return R_NilValue;
END_RCPP
}
// CharCounter_keys
CharacterVector CharCounter_keys(CharCounterXPtr xp);
RcppExport SEXP _seqtrie_CharCounter_keys(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharCounterXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(CharCounter_keys(xp));
    return rcpp_result_gen;
END_RCPP
}
// get_charset
CharacterVector get_charset(CharacterVector sequences);
RcppExport SEXP _seqtrie_get_charset(SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_charset(sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixForest_size
double RadixForest_size(RadixForestRXPtr xp);
RcppExport SEXP _seqtrie_RadixForest_size(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixForestRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixForest_size(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixForest_insert
LogicalVector RadixForest_insert(RadixForestRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixForest_insert(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixForestRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixForest_insert(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixForest_erase
LogicalVector RadixForest_erase(RadixForestRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixForest_erase(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixForestRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixForest_erase(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixForest_find
LogicalVector RadixForest_find(RadixForestRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixForest_find(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixForestRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixForest_find(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixForest_prefix_search
DataFrame RadixForest_prefix_search(RadixForestRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixForest_prefix_search(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixForestRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixForest_prefix_search(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixForest_print
std::vector<std::string> RadixForest_print(RadixForestRXPtr xp);
RcppExport SEXP _seqtrie_RadixForest_print(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixForestRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixForest_print(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixForest_graph
DataFrame RadixForest_graph(RadixForestRXPtr xp, const double max_depth);
RcppExport SEXP _seqtrie_RadixForest_graph(SEXP xpSEXP, SEXP max_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixForestRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const double >::type max_depth(max_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixForest_graph(xp, max_depth));
    return rcpp_result_gen;
END_RCPP
}
// RadixForest_to_vector
CharacterVector RadixForest_to_vector(RadixForestRXPtr xp);
RcppExport SEXP _seqtrie_RadixForest_to_vector(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixForestRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixForest_to_vector(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixForest_validate
bool RadixForest_validate(RadixForestRXPtr xp);
RcppExport SEXP _seqtrie_RadixForest_validate(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixForestRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixForest_validate(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixForest_create
RadixForestRXPtr RadixForest_create();
RcppExport SEXP _seqtrie_RadixForest_create() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(RadixForest_create());
    return rcpp_result_gen;
END_RCPP
}
// RadixForest_search
DataFrame RadixForest_search(RadixForestRXPtr xp, CharacterVector query, IntegerVector max_distance, const std::string mode, const int nthreads, const bool show_progress);
RcppExport SEXP _seqtrie_RadixForest_search(SEXP xpSEXP, SEXP querySEXP, SEXP max_distanceSEXP, SEXP modeSEXP, SEXP nthreadsSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixForestRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max_distance(max_distanceSEXP);
    Rcpp::traits::input_parameter< const std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixForest_search(xp, query, max_distance, mode, nthreads, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_size
double RadixTree_size(RadixTreeRXPtr xp);
RcppExport SEXP _seqtrie_RadixTree_size(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_size(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_insert
LogicalVector RadixTree_insert(RadixTreeRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixTree_insert(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_insert(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_erase
LogicalVector RadixTree_erase(RadixTreeRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixTree_erase(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_erase(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_find
LogicalVector RadixTree_find(RadixTreeRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixTree_find(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_find(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_prefix_search
DataFrame RadixTree_prefix_search(RadixTreeRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixTree_prefix_search(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_prefix_search(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_print
std::string RadixTree_print(RadixTreeRXPtr xp);
RcppExport SEXP _seqtrie_RadixTree_print(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_print(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_graph
DataFrame RadixTree_graph(RadixTreeRXPtr xp, const double max_depth);
RcppExport SEXP _seqtrie_RadixTree_graph(SEXP xpSEXP, SEXP max_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const double >::type max_depth(max_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_graph(xp, max_depth));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_to_vector
CharacterVector RadixTree_to_vector(RadixTreeRXPtr xp);
RcppExport SEXP _seqtrie_RadixTree_to_vector(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_to_vector(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_validate
bool RadixTree_validate(RadixTreeRXPtr xp);
RcppExport SEXP _seqtrie_RadixTree_validate(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_validate(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_create
RadixTreeRXPtr RadixTree_create();
RcppExport SEXP _seqtrie_RadixTree_create() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(RadixTree_create());
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_search
DataFrame RadixTree_search(RadixTreeRXPtr xp, CharacterVector query, IntegerVector max_distance, const std::string mode, const std::string gap_type, Rcpp::Nullable<IntegerMatrix> cost_matrix, const int nthreads, const bool show_progress);
RcppExport SEXP _seqtrie_RadixTree_search(SEXP xpSEXP, SEXP querySEXP, SEXP max_distanceSEXP, SEXP modeSEXP, SEXP gap_typeSEXP, SEXP cost_matrixSEXP, SEXP nthreadsSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max_distance(max_distanceSEXP);
    Rcpp::traits::input_parameter< const std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type gap_type(gap_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<IntegerMatrix> >::type cost_matrix(cost_matrixSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_search(xp, query, max_distance, mode, gap_type, cost_matrix, nthreads, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// c_dist_matrix
IntegerMatrix c_dist_matrix(CharacterVector query, CharacterVector target, const std::string mode, const std::string gap_type, Rcpp::Nullable<IntegerMatrix> cost_matrix, const int nthreads, const bool show_progress);
RcppExport SEXP _seqtrie_c_dist_matrix(SEXP querySEXP, SEXP targetSEXP, SEXP modeSEXP, SEXP gap_typeSEXP, SEXP cost_matrixSEXP, SEXP nthreadsSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type gap_type(gap_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<IntegerMatrix> >::type cost_matrix(cost_matrixSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(c_dist_matrix(query, target, mode, gap_type, cost_matrix, nthreads, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// c_dist_pairwise
IntegerVector c_dist_pairwise(CharacterVector query, CharacterVector target, const std::string mode, const std::string gap_type, Rcpp::Nullable<IntegerMatrix> cost_matrix, const int nthreads, const bool show_progress);
RcppExport SEXP _seqtrie_c_dist_pairwise(SEXP querySEXP, SEXP targetSEXP, SEXP modeSEXP, SEXP gap_typeSEXP, SEXP cost_matrixSEXP, SEXP nthreadsSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type gap_type(gap_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<IntegerMatrix> >::type cost_matrix(cost_matrixSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(c_dist_pairwise(query, target, mode, gap_type, cost_matrix, nthreads, show_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_seqtrie_CharCounter_create", (DL_FUNC) &_seqtrie_CharCounter_create, 0},
    {"_seqtrie_CharCounter_add", (DL_FUNC) &_seqtrie_CharCounter_add, 2},
    {"_seqtrie_CharCounter_subtract", (DL_FUNC) &_seqtrie_CharCounter_subtract, 2},
    {"_seqtrie_CharCounter_keys", (DL_FUNC) &_seqtrie_CharCounter_keys, 1},
    {"_seqtrie_get_charset", (DL_FUNC) &_seqtrie_get_charset, 1},
    {"_seqtrie_RadixForest_size", (DL_FUNC) &_seqtrie_RadixForest_size, 1},
    {"_seqtrie_RadixForest_insert", (DL_FUNC) &_seqtrie_RadixForest_insert, 2},
    {"_seqtrie_RadixForest_erase", (DL_FUNC) &_seqtrie_RadixForest_erase, 2},
    {"_seqtrie_RadixForest_find", (DL_FUNC) &_seqtrie_RadixForest_find, 2},
    {"_seqtrie_RadixForest_prefix_search", (DL_FUNC) &_seqtrie_RadixForest_prefix_search, 2},
    {"_seqtrie_RadixForest_print", (DL_FUNC) &_seqtrie_RadixForest_print, 1},
    {"_seqtrie_RadixForest_graph", (DL_FUNC) &_seqtrie_RadixForest_graph, 2},
    {"_seqtrie_RadixForest_to_vector", (DL_FUNC) &_seqtrie_RadixForest_to_vector, 1},
    {"_seqtrie_RadixForest_validate", (DL_FUNC) &_seqtrie_RadixForest_validate, 1},
    {"_seqtrie_RadixForest_create", (DL_FUNC) &_seqtrie_RadixForest_create, 0},
    {"_seqtrie_RadixForest_search", (DL_FUNC) &_seqtrie_RadixForest_search, 6},
    {"_seqtrie_RadixTree_size", (DL_FUNC) &_seqtrie_RadixTree_size, 1},
    {"_seqtrie_RadixTree_insert", (DL_FUNC) &_seqtrie_RadixTree_insert, 2},
    {"_seqtrie_RadixTree_erase", (DL_FUNC) &_seqtrie_RadixTree_erase, 2},
    {"_seqtrie_RadixTree_find", (DL_FUNC) &_seqtrie_RadixTree_find, 2},
    {"_seqtrie_RadixTree_prefix_search", (DL_FUNC) &_seqtrie_RadixTree_prefix_search, 2},
    {"_seqtrie_RadixTree_print", (DL_FUNC) &_seqtrie_RadixTree_print, 1},
    {"_seqtrie_RadixTree_graph", (DL_FUNC) &_seqtrie_RadixTree_graph, 2},
    {"_seqtrie_RadixTree_to_vector", (DL_FUNC) &_seqtrie_RadixTree_to_vector, 1},
    {"_seqtrie_RadixTree_validate", (DL_FUNC) &_seqtrie_RadixTree_validate, 1},
    {"_seqtrie_RadixTree_create", (DL_FUNC) &_seqtrie_RadixTree_create, 0},
    {"_seqtrie_RadixTree_search", (DL_FUNC) &_seqtrie_RadixTree_search, 8},
    {"_seqtrie_c_dist_matrix", (DL_FUNC) &_seqtrie_c_dist_matrix, 7},
    {"_seqtrie_c_dist_pairwise", (DL_FUNC) &_seqtrie_c_dist_pairwise, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_seqtrie(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
