// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "seqtrie_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// c_dist_matrix
IntegerMatrix c_dist_matrix(CharacterVector query, CharacterVector target, const std::string mode, Rcpp::Nullable<IntegerMatrix> cost_matrix, const int nthreads, const bool show_progress);
RcppExport SEXP _seqtrie_c_dist_matrix(SEXP querySEXP, SEXP targetSEXP, SEXP modeSEXP, SEXP cost_matrixSEXP, SEXP nthreadsSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<IntegerMatrix> >::type cost_matrix(cost_matrixSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(c_dist_matrix(query, target, mode, cost_matrix, nthreads, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// c_dist_pairwise
IntegerVector c_dist_pairwise(CharacterVector query, CharacterVector target, const std::string mode, Rcpp::Nullable<IntegerMatrix> cost_matrix, const int nthreads, const bool show_progress);
RcppExport SEXP _seqtrie_c_dist_pairwise(SEXP querySEXP, SEXP targetSEXP, SEXP modeSEXP, SEXP cost_matrixSEXP, SEXP nthreadsSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<IntegerMatrix> >::type cost_matrix(cost_matrixSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(c_dist_pairwise(query, target, mode, cost_matrix, nthreads, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_size
double RadixTree_size(RadixTreeRXPtr xp);
RcppExport SEXP _seqtrie_RadixTree_size(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_size(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_insert
LogicalVector RadixTree_insert(RadixTreeRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixTree_insert(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_insert(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_erase
LogicalVector RadixTree_erase(RadixTreeRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixTree_erase(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_erase(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_find
LogicalVector RadixTree_find(RadixTreeRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixTree_find(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_find(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_hamming_search
DataFrame RadixTree_hamming_search(RadixTreeRXPtr xp, CharacterVector sequences, IntegerVector max_distance, Rcpp::Nullable<IntegerMatrix> cost_matrix, const int nthreads, const bool show_progress);
RcppExport SEXP _seqtrie_RadixTree_hamming_search(SEXP xpSEXP, SEXP sequencesSEXP, SEXP max_distanceSEXP, SEXP cost_matrixSEXP, SEXP nthreadsSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max_distance(max_distanceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<IntegerMatrix> >::type cost_matrix(cost_matrixSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_hamming_search(xp, sequences, max_distance, cost_matrix, nthreads, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_levenshtein_search
DataFrame RadixTree_levenshtein_search(RadixTreeRXPtr xp, CharacterVector sequences, IntegerVector max_distance, Rcpp::Nullable<IntegerMatrix> cost_matrix, const int nthreads, const bool show_progress);
RcppExport SEXP _seqtrie_RadixTree_levenshtein_search(SEXP xpSEXP, SEXP sequencesSEXP, SEXP max_distanceSEXP, SEXP cost_matrixSEXP, SEXP nthreadsSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max_distance(max_distanceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<IntegerMatrix> >::type cost_matrix(cost_matrixSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_levenshtein_search(xp, sequences, max_distance, cost_matrix, nthreads, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_anchored_search
DataFrame RadixTree_anchored_search(RadixTreeRXPtr xp, CharacterVector sequences, IntegerVector max_distance, Rcpp::Nullable<IntegerMatrix> cost_matrix, const int nthreads, const bool show_progress);
RcppExport SEXP _seqtrie_RadixTree_anchored_search(SEXP xpSEXP, SEXP sequencesSEXP, SEXP max_distanceSEXP, SEXP cost_matrixSEXP, SEXP nthreadsSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max_distance(max_distanceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<IntegerMatrix> >::type cost_matrix(cost_matrixSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_anchored_search(xp, sequences, max_distance, cost_matrix, nthreads, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_prefix_search
DataFrame RadixTree_prefix_search(RadixTreeRXPtr xp, CharacterVector sequences);
RcppExport SEXP _seqtrie_RadixTree_prefix_search(SEXP xpSEXP, SEXP sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sequences(sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_prefix_search(xp, sequences));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_print
std::string RadixTree_print(RadixTreeRXPtr xp);
RcppExport SEXP _seqtrie_RadixTree_print(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_print(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_graph
DataFrame RadixTree_graph(RadixTreeRXPtr xp, const double max_depth);
RcppExport SEXP _seqtrie_RadixTree_graph(SEXP xpSEXP, SEXP max_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const double >::type max_depth(max_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_graph(xp, max_depth));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_to_vector
CharacterVector RadixTree_to_vector(RadixTreeRXPtr xp);
RcppExport SEXP _seqtrie_RadixTree_to_vector(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_to_vector(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_validate
bool RadixTree_validate(RadixTreeRXPtr xp);
RcppExport SEXP _seqtrie_RadixTree_validate(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RadixTreeRXPtr >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(RadixTree_validate(xp));
    return rcpp_result_gen;
END_RCPP
}
// RadixTree_create
RadixTreeRXPtr RadixTree_create();
RcppExport SEXP _seqtrie_RadixTree_create() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(RadixTree_create());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_seqtrie_c_dist_matrix", (DL_FUNC) &_seqtrie_c_dist_matrix, 6},
    {"_seqtrie_c_dist_pairwise", (DL_FUNC) &_seqtrie_c_dist_pairwise, 6},
    {"_seqtrie_RadixTree_size", (DL_FUNC) &_seqtrie_RadixTree_size, 1},
    {"_seqtrie_RadixTree_insert", (DL_FUNC) &_seqtrie_RadixTree_insert, 2},
    {"_seqtrie_RadixTree_erase", (DL_FUNC) &_seqtrie_RadixTree_erase, 2},
    {"_seqtrie_RadixTree_find", (DL_FUNC) &_seqtrie_RadixTree_find, 2},
    {"_seqtrie_RadixTree_hamming_search", (DL_FUNC) &_seqtrie_RadixTree_hamming_search, 6},
    {"_seqtrie_RadixTree_levenshtein_search", (DL_FUNC) &_seqtrie_RadixTree_levenshtein_search, 6},
    {"_seqtrie_RadixTree_anchored_search", (DL_FUNC) &_seqtrie_RadixTree_anchored_search, 6},
    {"_seqtrie_RadixTree_prefix_search", (DL_FUNC) &_seqtrie_RadixTree_prefix_search, 2},
    {"_seqtrie_RadixTree_print", (DL_FUNC) &_seqtrie_RadixTree_print, 1},
    {"_seqtrie_RadixTree_graph", (DL_FUNC) &_seqtrie_RadixTree_graph, 2},
    {"_seqtrie_RadixTree_to_vector", (DL_FUNC) &_seqtrie_RadixTree_to_vector, 1},
    {"_seqtrie_RadixTree_validate", (DL_FUNC) &_seqtrie_RadixTree_validate, 1},
    {"_seqtrie_RadixTree_create", (DL_FUNC) &_seqtrie_RadixTree_create, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_seqtrie(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
