% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zz_help_files.R
\name{td_partial_levenshtein}
\alias{td_partial_levenshtein}
\title{td_partial_levenshtein}
\usage{
td_partial_levenshtein(query, subject=NULL, anchor = "none", max_distance = NA_integer_, symmetric = FALSE, nthreads = 1L)
}
\arguments{
\item{query}{A character vector of strings as query}

\item{subject}{A character vector of strings as subject, a suffix_tree or NULL. See details}

\item{anchor}{"none", "left" or "right". Determines whether the left or right side of an alignment should be treated as a globally penalized or locally penalized.}

\item{max_distance}{The max levenshtein distance to search for matches.}

\item{symmetric}{Whether to treat query and subject as the same (i.e. pairwise matching)}

\item{nthreads}{Number of threads to use in computation}
}
\value{
A data.frame containing query, subject and distance.
}
\description{
Performs partial levenshtein matching using a suffix tree
}
\details{
Subject parameter can be a character vector, a suffix_tree or NULL. If NULL, the function will perform a pairwise search on query.
}
\examples{
x <- td_partial_levenshtein(query = "hell", subject = "hello", anchor = "left")
}
