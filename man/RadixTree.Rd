% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/r6_class.R
\name{RadixTree}
\alias{RadixTree}
\title{RadixTree}
\description{
Radix Tree (trie) class implementation
}
\section{Usage}{

\preformatted{tree <- RadixTree$new()

tree$print()

tree$graph(depth = -1, root_label = "root", plot = TRUE)

tree$to_string()

tree$to_vector()

tree$size()

tree$insert(sequences)

tree$erase(sequences)

tree$find(sequences)

tree$search(sequences, max_distance = NULL, max_fraction = NULL, mode = "levenshtein", cost_matrix = NULL, nthreads = 1, show_progress = FALSE)
}
}

\section{Arguments}{

\describe{
  \item{depth}{- In \code{$graph()}, the tree depth to plot. Default -1 means plot the entire tree.}
  \item{root_label}{- In \code{$graph()}, the label of the root node.}
  \item{plot}{- In \code{$graph()}, whether to create a plot or return the data used to generate the plot.}
  \item{sequences}{- In \code{$search()}, the sequences to operate on.}
  \item{max_distance}{- In \code{$search()}, how far to search for similar sequences, in units of absolute distance. See details.}
  \item{max_fraction}{- In \code{$search()}, how far to search for similar sequences, relative to the sequence length. See details.}
  \item{mode}{- In \code{$search()}, One of hamming (hm), levenshtein (lv) or anchored (an). Levenshtein will allows for insertions and deletions and calculates "edit distance". Hamming does not allow for insertions or deletions.}
  \item{cost_matrix}{In \code{$search()}, a cost matrix for use with Levenshtein or Anchored searches. See details.}
  \item{gap_cost}{In \code{$search()}, a cost matrix for use with Levenshtein or Anchored searches. See details.}
  \item{nthreads}{- How many threads to use in the search.}
  \item{show_progress}{- Display progress.}lgm
}
}

\section{Details}{

\code{$new()} creates a new Tree object, which holds the pointer to the underlying C++ implentation. The RadixTree class accepts any strings of single-width characters. 

\code{$print()} and \code{$to_string()} prints to screen or outputs the tree to a string representation.

\code{$to_vector()} outputs all sequences held by the tree. 

\code{$size()} outputs the size of the tree (i.e. how many sequences are contained). 

\code{$insert()}, \code{$erase()} and \code{$find()} insert, erase and find sequences in the tree, respectively.

\code{$search()} This function searches for similar sequences within a threshold (given by max_distance or max_fraction) based on Hamming, Levenshtein or Anchored algorithms.
An anchored search is a form of semi-global alignment, where the query sequence is "anchored" (global) to the beginning of both the query and target sequences, 
but is semi-global in that the end of the either the query sequence or target sequence (but not both) can be unaligned. This contrasts with the Levenshtein distance which is global at 
both the starts and ends of the sequences. 

The output of this function is a data.frame of all matches with columns "query" (the sequences input to the search function), 
"target" (the sequences inserted into the tree) and "distance" the absolute distance between query and target sequences. 
For anchored searches, the output also includes "query_size" and "target_size" which are the partial lengths of the query and target sequences that are aligned.
}

\examples{
tree <- RadixTree$new()
tree$insert(c("ACGT", "AAAA"))
tree$erase("AAAA")
tree$search("ACG", max_distance = 1, mode = "levenshtein")
 #   query target distance
 # 1   ACG   ACGT        1
 
tree$search("ACG", max_distance = 1, mode = "hamming")
 # query    target   distance
 # <0 rows> (or 0-length row.names)
}
\seealso{
https://en.wikipedia.org/wiki/Radix_tree
}
